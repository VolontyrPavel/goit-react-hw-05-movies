{"version":3,"file":"static/js/311.84f6207c.chunk.js","mappings":"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","sources":["components/MoviesList.jsx","components/MovieSearchForm.jsx","page/Movies.jsx","service/getService.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <Link key={id} to={`/movies/${id}`}>\n          <li>{title}</li>\n        </Link>\n      ))}\n    </ul>\n  )\n}\n\nMoviesList.propType = {\n  movies: PropTypes.arrayOf(PropTypes.string),\n};\n","import PropTypes from 'prop-types';\n\nexport const MovieSearchForm = ({\n  fetchSearchData,\n  setSearchParams,\n  searchValue,\n}) => {\n  const onHandleInput = ({ target: { value } }) => {\n    setSearchParams({ query: value });\n  };\n\n  const onHundleSubmit = e => {\n    e.preventDefault();\n    fetchSearchData(searchValue);\n  };\n\n  return (\n    <form onSubmit={onHundleSubmit}>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie\"\n        onChange={onHandleInput}\n        value={searchValue||''}\n      ></input>\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nMovieSearchForm.propType = {\n  fetchSearchData: PropTypes.func.isRequired,\n  setSearchParams: PropTypes.object.isRequired,\n  searchValue: PropTypes.string,\n};\n\n","import { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation, Link } from 'react-router-dom';\n\nimport { MovieSearchForm } from '../components/MovieSearchForm';\nimport { MoviesList } from '../components/MoviesList';\nimport { getMoviesByQuery } from '../service/getService';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [, setIsLoading] = useState(false);\n  const [, setError] = useState(null);\n  \n  const location = useLocation();\n  console.log(location);\n  const searchValue = searchParams.get('query');\n\n  useEffect(() => {\n    !searchValue && setSearchParams({});\n  }, [searchValue, setSearchParams]);\n\n  const fetchSearchData = async (searchParams) => {\n    setIsLoading(true);\n    try {\n      const data = await getMoviesByQuery(searchParams);\n      setMovies(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <MovieSearchForm\n        fetchSearchData={fetchSearchData}\n        setSearchParams={setSearchParams}\n        searchValue={searchValue}\n      />\n      <Link to=\"/movies/:movieId\" state={location}></Link>\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '5710a8f06496583a27b9e808ee84dcbe';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TRENDING_DAY = '/trending/movie/day';\nconst LANGUAGE = 'en-US';\nconst SEARCH_QUERY = '/search/movie';\nconst ADULT = 'false';\nconst BY_ID = '/movie';\nconst CAST = '/credits'\nconst REVIEWS = '/reviews'\n\nexport const getMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}${TRENDING_DAY}?api_key=${API_KEY}&page=1&language=${LANGUAGE}`\n  );\n  return data.results;\n};\n\nexport const getMoviesByQuery = async (query, page = 1) => {\n  const { data } = await axios.get(\n    `${BASE_URL}${SEARCH_QUERY}?query=${query}&api_key=${API_KEY}&page=${page}&include_adult=${ADULT}&language=${LANGUAGE}`\n  );\n  return data.results;\n};\n\nexport const getMoviesById = async (id) => {\n  const { data } = await axios.get(\n    `${BASE_URL}${BY_ID}/${id}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  return data;\n};\n\nexport const getMoviesByCast = async (id) => {\n  const { data } = await axios.get(\n    `${BASE_URL}${BY_ID}/${id}${CAST}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  return data;\n};\n\nexport const getMoviesByRewiews = async (id) => {\n  const { data } = await axios.get(\n    `${BASE_URL}${BY_ID}/${id}${REVIEWS}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  return data;\n};"],"names":["MoviesList","movies","map","id","title","to","propType","PropTypes","MovieSearchForm","fetchSearchData","setSearchParams","searchValue","onSubmit","e","preventDefault","type","autoComplete","autoFocus","placeholder","onChange","value","target","query","useSearchParams","searchParams","useState","setMovies","setIsLoading","setError","location","useLocation","console","log","get","useEffect","getMoviesByQuery","data","message","state","API_KEY","BASE_URL","LANGUAGE","SEARCH_QUERY","ADULT","BY_ID","getMovies","axios","results","page","getMoviesById","getMoviesByCast","getMoviesByRewiews"],"sourceRoot":""}